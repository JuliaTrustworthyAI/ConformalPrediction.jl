{
  "hash": "70e7bfce4be9fa1fc08fda1cdc896820",
  "result": {
    "markdown": "```@meta\nCurrentModule = ConformalPrediction\n```\n\n# How to Conformalize a Deep Image Classifier\n\n\n\nDeep Learning is popular and --- for some tasks like image classification --- remarkably powerful. But it is also well-known that Deep Neural Networks (DNN) can be unstable [@goodfellow2014explaining] and poorly calibrated. Conformal Prediction can be used to mitigate these pitfalls. This how-to guide demonstrates how you can build an image classifier in `Flux.jl` and conformalize its predictions. For a formal treatment see @angelopoulos2022uncertainty.\n\n## The Task at Hand \n\nThe task at hand is to predict the labels of handwritten images of digits using the famous MNIST dataset [@lecun1998mnist]. Importing this popular machine learning dataset in Julia is made remarkably easy through `MLDatasets.jl`:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing MLDatasets\nN = 1000\nXraw, yraw = MNIST(split=:train)[:]\nXraw = Xraw[:,:,1:N]\nyraw = yraw[1:N]\n```\n:::\n\n\nThe chart below shows a few random samples from the training data:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing MLJ\nusing Images\nX = map(x -> convert2image(MNIST, x), eachslice(Xraw, dims=3))\ny = coerce(yraw, Multiclass)\n\nn_samples = 10\nmosaic(rand(X, n_samples)..., ncol=n_samples)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![Random samples from the MNIST dataset.](mnist_files/figure-commonmark/fig-samples-output-1.png){#fig-samples}\n:::\n:::\n\n\n## Building the Network\n\nTo model the mapping from image inputs to labels will rely on a simple Multi-Layer Perceptron (MLP). A great Julia library for Deep Learning is `Flux.jl`. But wait ... doesn't `ConformalPrediction.jl` work with models trained in `MLJ.jl`? That's right, but fortunately there exists a `Flux.jl` interface to `MLJ.jl`, namely `MLJFlux.jl`. The interface is still in its early stages, but already very powerful and easily accessible for anyone (like myself) who is used to building Neural Networks in `Flux.jl`. \n\nIn `Flux.jl`, you could build an MLP for this task as follows,\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nusing Flux\n\nmlp = Chain(\n    Flux.flatten,\n    Dense(prod((28,28)), 32, relu),\n    Dense(32, 10)\n)\n```\n:::\n\n\nwhere `(28,28)` is just the input dimension (28x28 pixel images). Since we have ten digits, our output dimension is ten.^[For a full tutorial on how to build an MNIST image classifier relying solely on `Flux.jl`, check out this [tutorial](https://fluxml.ai/Flux.jl/stable/tutorials/2021-01-26-mlp/).]\n\nWe can do the exact same thing in `MLJFlux.jl` as follows,\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nusing MLJFlux\n\nbuilder = MLJFlux.@builder Chain(\n    Flux.flatten,\n    Dense(prod(n_in), 32, relu),\n    Dense(32, n_out)\n)\n```\n:::\n\n\nwhere here we rely on the `@builder` macro to make the transition from `Flux.jl` to `MLJ.jl` as seamless as possible. Finally, `MLJFlux.jl` already comes with a number of helper functions to define plain-vanilla networks. In this case, we will use the `ImageClassifier` with our custom builder and cross-entropy loss:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nImageClassifier = @load ImageClassifier\nclf = ImageClassifier(\n    builder=builder,\n    epochs=10,\n    loss=Flux.crossentropy\n)\n```\n:::\n\n\nThe generated instance `clf` is a model (in the `MLJ.jl` sense) so from this point on we can rely on standard `MLJ.jl` workflows. For example, we can wrap our model in data to create a machine and then evaluate it on a holdout set as follows:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nmach = machine(clf, X, y)\n\nevaluate!(\n    mach,\n    resampling=Holdout(rng=123, fraction_train=0.8),\n    operation=predict_mode,\n    measure=[accuracy]\n)\n```\n:::\n\n\nThe accuracy of our very simple model is not amazing, but good enough for the purpose of this tutorial. For each image, our MLP returns a softmax output for each possible digit: 0,1,2,3,...,9. Since each individual softmax output is valued between zero and one, $y_k\\in(0,1)$, this is commonly interpreted as a probability: $y_k \\coloneqq p(y=k|X)$. Edge cases -- that is values close to either zero or one -- indicate high predictive certainty. But this is only a heuristic notion of predictive uncertainty [@angelopoulos2021gentle]. Next, we will turn this heuristic notion of uncertainty into a rigorous one using Conformal Prediction.\n\n## Conformalizing the Network\n\nSince `clf` is a model, it is also compatible with our package: `ConformalPrediction.jl`. To conformalize our MLP, we therefore only need to call `conformal_model(clf)`. Since the generated instance `conf_model` is also just a model, we can still rely on standard `MLJ.jl` workflows. Below we first wrap it in data and then fit it. Aaaand ... we're done! Let's look at the results in the next section.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nusing ConformalPrediction\nconf_model = conformal_model(clf; method=:simple_inductive)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n## Results\n\n\n\nThe charts below present the results. The first row displays highly certain predictions, now defined in the rigorous sense of Conformal Prediction: in each case, the conformal set (just beneath the image) includes only one label. \n\nThe following two rows display increasingly uncertain predictions of set size two and three, respectively. They demonstrate that CP is well equipped to deal with samples characterized by high aleatoric uncertainty: digits four (4), seven (7) and nine (9) share certain similarities. So do digits five (5) and six (6) as well as three (3) and eight (8). These may be hard to distinguish from each other even after seeing many examples (and even for a human). It is therefore unsurprising to see that these digits often end up together in conformal sets. \n\n::: {#fig-plots .cell layout-nrow='3' execution_count=10}\n\n::: {.cell-output .cell-output-display}\n![Plot 1](mnist_files/figure-commonmark/fig-plots-output-1.svg){#fig-plots-1}\n:::\n\n::: {.cell-output .cell-output-display}\n![Plot 2](mnist_files/figure-commonmark/fig-plots-output-2.svg){#fig-plots-2}\n:::\n\n::: {.cell-output .cell-output-display}\n![Plot 3](mnist_files/figure-commonmark/fig-plots-output-3.svg){#fig-plots-3}\n:::\n\nConformalised predictions from an image classifier.\n:::\n\n\n## Evaluation\n\nAs always, we can also evaluate our conformal model in terms of coverage (correctness) and size-stratified coverage (adaptiveness).\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\n_eval = evaluate!(\n    mach,\n    resampling=Holdout(rng=123, fraction_train=0.8),\n    operation=predict,\n    measure=[emp_coverage, ssc]\n)\ndisplay(_eval)\nprintln(\"Empirical coverage: $(round(_eval.measurement[1], digits=3))\")\nprintln(\"SSC: $(round(_eval.measurement[2], digits=3))\")\n```\n\n::: {.cell-output .cell-output-display}\n```\nPerformanceEvaluation object with these fields:\n  measure, operation, measurement, per_fold,\n  per_observation, fitted_params_per_fold,\n  report_per_fold, train_test_rows\nExtract:\n┌───────────────────────────────────────────────────────────┬───────────┬───────\n│ measure                                                   │ operation │ meas ⋯\n├───────────────────────────────────────────────────────────┼───────────┼───────\n│ emp_coverage (generic function with 1 method)             │ predict   │ 0.95 ⋯\n│ size_stratified_coverage (generic function with 1 method) │ predict   │ 0.86 ⋯\n└───────────────────────────────────────────────────────────┴───────────┴───────\n                                                               2 columns omitted\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEmpirical coverage: 0.955\nSSC: 0.867\n```\n:::\n:::\n\n\n\n\nUnsurprisingly, we can attain higher adaptivity (SSC) when using adaptive prediction sets:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nconf_model = conformal_model(clf; method=:adaptive_inductive)\nmach = machine(conf_model, X, y)\nfit!(mach)\n_eval = evaluate!(\n    mach,\n    resampling=Holdout(rng=123, fraction_train=0.8),\n    operation=predict,\n    measure=[emp_coverage, ssc]\n)\nresults[:adaptive_inductive] = mach\ndisplay(_eval)\nprintln(\"Empirical coverage: $(round(_eval.measurement[1], digits=3))\")\nprintln(\"SSC: $(round(_eval.measurement[2], digits=3))\")\n```\n\n::: {.cell-output .cell-output-display}\n```\nPerformanceEvaluation object with these fields:\n  measure, operation, measurement, per_fold,\n  per_observation, fitted_params_per_fold,\n  report_per_fold, train_test_rows\nExtract:\n┌───────────────────────────────────────────────────────────┬───────────┬───────\n│ measure                                                   │ operation │ meas ⋯\n├───────────────────────────────────────────────────────────┼───────────┼───────\n│ emp_coverage (generic function with 1 method)             │ predict   │ 0.99 ⋯\n│ size_stratified_coverage (generic function with 1 method) │ predict   │ 0.96 ⋯\n└───────────────────────────────────────────────────────────┴───────────┴───────\n                                                               2 columns omitted\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEmpirical coverage: 0.995\nSSC: 0.967\n```\n:::\n:::\n\n\nWe can also have a look at the resulting set size for both approaches:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nplt_list = []\nfor (_mod, mach) in results\n    push!(plt_list, bar(mach.model, mach.fitresult, X; title=String(_mod)))\nend\nplot(plt_list..., size=(800,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n![Prediction interval width.](mnist_files/figure-commonmark/fig-setsize-output-1.svg){#fig-setsize}\n:::\n:::\n\n\n# References\n\n",
    "supporting": [
      "mnist_files"
    ],
    "filters": []
  }
}