{
  "hash": "23e5ff6ddc8b19eba4e8290b20658f33",
  "result": {
    "markdown": "---\nformat:\n  commonmark:\n    variant: '-raw_html'\n    wrap: none\n    self-contained: true\ncrossref:\n  fig-prefix: Figure\n  tbl-prefix: Table\nbibliography: 'https://raw.githubusercontent.com/pat-alt/bib/main/bib.bib'\noutput: asis\nexecute:\n  output: false\n  freeze: auto\n  eval: true\n  echo: true\n---\n\n# Classification Tutorial\n\n[INCOMPLETE]\n\nWe firstly generate some synthetic data with three classes and partition it into a training set, a calibration set and a test set:\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing MLJ\nX, y = MLJ.make_blobs(1000, 2, centers=3, cluster_std=2)\ntrain, calibration, test = partition(eachindex(y), 0.4, 0.4)\n```\n:::\n\n\nFollowing the standard [MLJ](https://alan-turing-institute.github.io/MLJ.jl/dev/) procedure, we train a boosted tree for the classification task:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nEvoTreeClassifier = @load EvoTreeClassifier pkg=EvoTrees\nmodel = EvoTreeClassifier() \nmach = machine(model, X, y)\nfit!(mach, rows=train)\n```\n:::\n\n\nNext we instantiate our conformal machine and calibrate using the calibration data:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing ConformalPrediction\nconf_mach = conformal_machine(mach)\ncalibrate!(conf_mach, selectrows(X, calibration), y[calibration])\n```\n:::\n\n\nUsing the generic `predict` method we can generate prediction sets like so:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\npredict(conf_mach, selectrows(X, rand(test,5)))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n╭──────────────────────────────────────────────────────────────────────────╮\n│                                                                          │\n│      (1)   Pair[1 => missing, 2 => 0.6448661054062889, 3 => missing]     │\n│      (2)   Pair[1 => missing, 2 => missing, 3 => 0.8197529347049547]     │\n│      (3)   Pair[1 => missing, 2 => 0.8229512785953512, 3 => missing]     │\n│      (4)   Pair[1 => missing, 2 => 0.7858778376049668, 3 => missing]     │\n│      (5)   Pair[1 => missing, 2 => missing, 3 => 0.8197529347049547]     │\n│                                                                          │\n│                                                                          │\n╰────────────────────────────────────────────────────────────── 5 items ───╯\n```\n:::\n:::\n\n\n",
    "supporting": [
      "simple_files"
    ],
    "filters": []
  }
}