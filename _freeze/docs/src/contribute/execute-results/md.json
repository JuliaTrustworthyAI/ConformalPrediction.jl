{
  "hash": "c8191078af8739a251639903687b487e",
  "result": {
    "markdown": "# Contributor's Guide\n\n```@meta\nCurrentModule = ConformalPrediction\n```\n\n## Contents\n\n```@contents\nPages = [\"contribute.md\"]\nDepth = 2\n```\n\n## Contributing to `ConformalPrediction.jl`\n\nContributions are welcome! Please follow the [SciML ColPrac guide](https://github.com/SciML/ColPrac).\n\n## Architecture\n\nThe diagram below demonstrates the package architecture at the time of writing. This is still subject to change, so any thoughts and comments are very much welcome. \n\nThe goal is to make this package as compatible as possible with MLJ to tab into existing functionality. The basic idea is to subtype MLJ `Supervised` models and then use concrete types to implement different approaches to conformal prediction. For each of these concrete types the compulsory `MMI.fit` and `MMI.predict` methods need be implemented (see [here](https://alan-turing-institute.github.io/MLJ.jl/v0.18/adding_models_for_general_use/#Supervised-models)). \n\n\n```{mermaid}\n%%| echo: false\nflowchart TB\n    mmi[MLJModelInterface]\n    subgraph ConformalModel\n        interval[ConformalInterval]\n        set[ConformalSet]\n        prob[ConformalProbabilistic]\n        struct1([NaiveRegressor])\n        struct2([...])\n        fit((MMI.fit))\n        predict((MMI.predict))\n        interval --> struct1\n        set --> struct2\n        struct1 & struct2 --dispatch--> fit & predict\n    end\n    \n    mmi --<:MMI.Interval--> interval\n    mmi --<:MMI.Supervised--> set\n    mmi --<:MMI.Probabilistic--> prob\n```\n\n\n### Abstract Suptypes\n\nCurrently I intend to work with three different abstract subtypes: \n\n```@docs\nConformalInterval\nConformalSet\nConformalProbabilistic\n```\n\n### `fit` and `predict`\n\nThe `fit` and `predict` methods are compulsory in order to prepare models for general use with MLJ. They also serve us to implement the logic underlying the various approaches to conformal prediction. \n\nTo understand how this currently works, let's look at the [`JackknifeRegressor`](@ref) as an example. Below are the two docstrings documenting both methods. \n\n\n```{md}\n!!! note \"Source Code\"\n    Hovering over the bottom-right corner will reveal buttons that take \n```\n\n\n```@docs\nfit(conf_model::JackknifeRegressor, verbosity, X, y)\n```\n\n```@docs\npredict(conf_model::JackknifeRegressor, fitresult, Xnew)\n```\n\n",
    "supporting": [
      "contribute_files/figure-commonmark"
    ],
    "filters": []
  }
}