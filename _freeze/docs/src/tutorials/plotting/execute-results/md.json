{
  "hash": "cbfe773c346434c96a0610e9736b03f8",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Visualization using `TaijaPlotting.jl`\n---\n\n\n\n```@meta\nCurrentModule = ConformalPrediction\n```\n\n\n\n\nThis tutorial demonstrates how various custom plotting methods can be used to visually analyze conformal predictors.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing ConformalPrediction\nusing Plots, TaijaPlotting\n```\n:::\n\n\n## Regression\n\n### Visualizing Prediction Intervals\n\nFor conformal regressors, the `TaijaPlotting.plot` can be used to visualize the prediction intervals for given data points.\n\n#### Univariate Input\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nusing MLJ\nX, y = make_regression(100, 1; noise=0.3)\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nEvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees\nmodel = EvoTreeRegressor() \nconf_model = conformal_model(model)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nplot(mach.model, mach.fitresult, X, y; input_var=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](plotting_files/figure-commonmark/cell-6-output-1.svg){}\n:::\n:::\n\n\n#### Multivariate Input\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nusing MLJ\nX, y = @load_boston\nschema(X)\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nEvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees\nmodel = EvoTreeRegressor() \nconf_model = conformal_model(model)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ninput_vars = [:Crim, :Age, :Tax]\nnvars = length(input_vars)\nplt_list = []\nfor input_var in input_vars\n    plt = plot(mach.model, mach.fitresult, X, y; input_var=input_var, title=input_var)\n    push!(plt_list, plt)\nend\nplot(plt_list..., layout=(1,nvars), size=(nvars*200, 200))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](plotting_files/figure-commonmark/cell-9-output-1.svg){}\n:::\n:::\n\n\n### Visualizing Set Size\n\nTo visualize the set size distribution, the `TaijaPlotting.bar` can be used. For regression models, the prediction interval widths are stratified into discrete bins.\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nbar(mach.model, mach.fitresult, X)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](plotting_files/figure-commonmark/cell-10-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nEvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees\nmodel = EvoTreeRegressor() \nconf_model = conformal_model(model, method=:jackknife_plus)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nbar(mach.model, mach.fitresult, X)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![](plotting_files/figure-commonmark/cell-12-output-1.svg){}\n:::\n:::\n\n\n## Classification\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nKNNClassifier = @load KNNClassifier pkg=NearestNeighborModels\nmodel = KNNClassifier(;K=3)\n```\n:::\n\n\n### Visualizing Predictions\n\n#### Stacked Area Charts\n\nStacked area charts can be used to visualize prediction sets for any conformal classifier.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nusing MLJ\nn_input = 4\nX, y = make_blobs(100, n_input)\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nconf_model = conformal_model(model)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nplt_list = []\nfor i in 1:n_input\n    plt = areaplot(mach.model, mach.fitresult, X, y; input_var=i, title=\"Input $i\")\n    push!(plt_list, plt)\nend\nplot(plt_list..., size=(220*n_input,200), layout=(1, n_input))\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](plotting_files/figure-commonmark/cell-16-output-1.svg){}\n:::\n:::\n\n\n#### Contour Plots for Two-Dimensional Inputs\n\nFor conformal classifiers with exactly two input variables, the `TaijaPlotting.contourf` method can be used to visualize conformal predictions in the two-dimensional feature space.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nusing MLJ\nX, y = make_blobs(100, 2)\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nconf_model = conformal_model(model)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\np1 = contourf(mach.model, mach.fitresult, X, y)\np2 = contourf(mach.model, mach.fitresult, X, y; plot_set_size=true)\nplot(p1, p2, size=(700,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](plotting_files/figure-commonmark/cell-19-output-1.svg){}\n:::\n:::\n\n\n### Visualizing Set Size\n\nTo visualize the set size distribution, the `TaijaPlotting.bar` can be used. Recall that for more adaptive predictors the distribution of set sizes is typically spread out more widely, which reflects that “the procedure is effectively distinguishing between easy and hard inputs” [@angelopoulos2021gentle]. This is desirable: when for a given sample it is difficult to make predictions, this should be reflected in the set size (or interval width in the regression case). Since ‘difficult’ lies on some spectrum that ranges from ‘very easy’ to ‘very difficult’ the set size should vary across the spectrum of ‘empty set’ to ‘all labels included’.\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nX, y = make_moons(500; noise=0.15)\nKNNClassifier = @load KNNClassifier pkg=NearestNeighborModels\nmodel = KNNClassifier(;K=50) \n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nconf_model = conformal_model(model)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\np1 = contourf(mach.model, mach.fitresult, X, y; plot_set_size=true)\np2 = bar(mach.model, mach.fitresult, X)\nplot(p1, p2, size=(700,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n![](plotting_files/figure-commonmark/cell-22-output-1.svg){}\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nconf_model = conformal_model(model, method=:adaptive_inductive)\nmach = machine(conf_model, X, y)\nfit!(mach)\n```\n:::\n\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\np1 = contourf(mach.model, mach.fitresult, X, y; plot_set_size=true)\np2 = bar(mach.model, mach.fitresult, X)\nplot(p1, p2, size=(700,300))\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n![](plotting_files/figure-commonmark/cell-24-output-1.svg){}\n:::\n:::\n\n\n",
    "supporting": [
      "plotting_files"
    ],
    "filters": []
  }
}