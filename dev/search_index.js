var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConformalPrediction","category":"page"},{"location":"#ConformalPrediction","page":"Home","title":"ConformalPrediction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConformalPrediction.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ConformalPrediction.jl is a package for Uncertainty Quantification (UQ) through Conformal Prediction (CP) in Julia. Conformal Prediction is distribution-free, easy-to-understand, easy-to-use and model-agnostic.","category":"page"},{"location":"#Disclaimer","page":"Home","title":"Disclaimer ⚠️","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is in its very early stages of development.","category":"page"},{"location":"#Usage-Example-Classification","page":"Home","title":"Usage Example - Classification","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using MLJ\nX, y = MLJ.make_blobs(1000, 2, centers=2)\ntrain, calibration, test = partition(eachindex(y), 0.4, 0.4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"EvoTreeClassifier = @load EvoTreeClassifier pkg=EvoTrees\nmodel = EvoTreeClassifier() ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mach = machine(model, X, y)\nfit!(mach, rows=train)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ConformalPrediction\nconf_mach = conformal_machine(mach)\ncalibrate!(conf_mach, selectrows(X, calibration), y[calibration])","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(conf_mach, selectrows(X, test))","category":"page"},{"location":"#Usage-Example-Regression","page":"Home","title":"Usage Example - Regression","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using MLJ\nX, y = MLJ.make_regression(1000, 2)\ntrain, calibration, test = partition(eachindex(y), 0.4, 0.4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"EvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees\nmodel = EvoTreeRegressor() ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mach = machine(model, X, y)\nfit!(mach, rows=train)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ConformalPrediction\nconf_mach = conformal_machine(mach)\ncalibrate!(conf_mach, selectrows(X, calibration), y[calibration])","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(conf_mach, selectrows(X, test))","category":"page"}]
}
