var documenterSearchIndex = {"docs":
[{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = ConformalPrediction","category":"page"},{"location":"reference/#All-functions-and-types","page":"Reference","title":"All functions and types","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/#Exported-functions","page":"Reference","title":"Exported functions","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [\n    ConformalPrediction,\n    ConformalPrediction.ConformalMachines\n]\nPrivate = false","category":"page"},{"location":"reference/#ConformalPrediction.calibrate!-Tuple{ConformalPrediction.ConformalMachines.ConformalMachine, Any, Any}","page":"Reference","title":"ConformalPrediction.calibrate!","text":"calibrate!(conf_mach::ConformalMachine, Xcal, ycal)\n\nCalibrates a conformal machine using calibration data. \n\n\n\n\n\n","category":"method"},{"location":"reference/#MLJModelInterface.predict-Tuple{ConformalPrediction.ConformalMachines.ConformalMachine, Any}","page":"Reference","title":"MLJModelInterface.predict","text":"predict(conf_mach::ConformalMachine, Xnew; coverage=0.95)\n\nComputes the conformal prediction for any conformal machine and new data Xnew. The default coverage ratio is set to 95%.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConformalPrediction.ConformalMachines.ConformalMachine","page":"Reference","title":"ConformalPrediction.ConformalMachines.ConformalMachine","text":"An abstract base type for conformal machines.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ConformalPrediction.ConformalMachines.LABELConformalClassifier","page":"Reference","title":"ConformalPrediction.ConformalMachines.LABELConformalClassifier","text":"The LABEL method for conformal prediction is the simplest approach to classification.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ConformalPrediction.ConformalMachines.NaiveConformalRegressor","page":"Reference","title":"ConformalPrediction.ConformalMachines.NaiveConformalRegressor","text":"The Naive method for conformal prediction is the simplest approach to regression.\n\n\n\n\n\n","category":"type"},{"location":"reference/#ConformalPrediction.ConformalMachines.conformal_machine-Tuple{MLJBase.Machine{<:MLJModelInterface.Supervised}}","page":"Reference","title":"ConformalPrediction.ConformalMachines.conformal_machine","text":"conformal_machine(mach::Machine{<:Supervised}; method::Union{Nothing, Symbol}=nothing)\n\nA simple wrapper function that turns any MLJ.Machine{<:Supervised} into a conformal machine. It accepts an optional key argument that can be used to specify the desired method for conformal prediction.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConformalPrediction.ConformalMachines.prediction_region-Tuple{ConformalPrediction.ConformalMachines.ConformalMachine, Any, Real}","page":"Reference","title":"ConformalPrediction.ConformalMachines.prediction_region","text":"prediction_region(conf_mach::ConformalMachine, Xnew, ϵ::Real)\n\nGeneric method for generating prediction regions from a calibrated conformal machine.\n\n\n\n\n\n","category":"method"},{"location":"reference/#ConformalPrediction.ConformalMachines.score-Tuple{ConformalPrediction.ConformalMachines.ConformalMachine, Any, Any}","page":"Reference","title":"ConformalPrediction.ConformalMachines.score","text":"score(conf_mach::ConformalMachine, Xcal, ycal)\n\nGeneric method for computing non-conformity scores for any conformal machine using calibration data.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Internal-functions","page":"Reference","title":"Internal functions","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [\n    ConformalPrediction,\n    ConformalPrediction.ConformalMachines\n]\nPublic = false","category":"page"},{"location":"reference/#ConformalPrediction.ConformalMachines.available_machines","page":"Reference","title":"ConformalPrediction.ConformalMachines.available_machines","text":"A container listing all available methods for conformal prediction.\n\n\n\n\n\n","category":"constant"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConformalPrediction","category":"page"},{"location":"#ConformalPrediction","page":"Home","title":"ConformalPrediction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConformalPrediction.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ConformalPrediction.jl is a package for Uncertainty Quantification (UQ) through Conformal Prediction (CP) in Julia. Conformal Prediction is distribution-free, easy-to-understand, easy-to-use and model-agnostic.","category":"page"},{"location":"#Disclaimer","page":"Home","title":"Disclaimer ⚠️","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is in its very early stages of development.","category":"page"},{"location":"#Usage-Example-Classification","page":"Home","title":"Usage Example - Classification","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using MLJ\nX, y = MLJ.make_blobs(1000, 2, centers=2)\ntrain, calibration, test = partition(eachindex(y), 0.4, 0.4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"EvoTreeClassifier = @load EvoTreeClassifier pkg=EvoTrees\nmodel = EvoTreeClassifier() ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mach = machine(model, X, y)\nfit!(mach, rows=train)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ConformalPrediction\nconf_mach = conformal_machine(mach)\ncalibrate!(conf_mach, selectrows(X, calibration), y[calibration])","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(conf_mach, selectrows(X, test))","category":"page"},{"location":"#Usage-Example-Regression","page":"Home","title":"Usage Example - Regression","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using MLJ\nX, y = MLJ.make_regression(1000, 2)\ntrain, calibration, test = partition(eachindex(y), 0.4, 0.4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"EvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees\nmodel = EvoTreeRegressor() ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mach = machine(model, X, y)\nfit!(mach, rows=train)","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ConformalPrediction\nconf_mach = conformal_machine(mach)\ncalibrate!(conf_mach, selectrows(X, calibration), y[calibration])","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(conf_mach, selectrows(X, test))","category":"page"}]
}
