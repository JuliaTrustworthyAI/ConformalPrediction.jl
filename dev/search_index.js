var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConformalPrediction","category":"page"},{"location":"#ConformalPrediction","page":"Home","title":"ConformalPrediction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConformalPrediction.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"  Activating project at `~/Documents/code/ConformalPrediction.jl/docs`","category":"page"},{"location":"","page":"Home","title":"Home","text":"ConformalPrediction.jl is a package for Uncertainty Quantification (UQ) through Conformal Prediction (CP) in Julia. Conformal Prediction is distribution-free, easy-to-understand, easy-to-use and model-agnostic.","category":"page"},{"location":"#Disclaimer","page":"Home","title":"Disclaimer ⚠️","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is in its very early stages of development.","category":"page"},{"location":"#Usage-Example-Classification","page":"Home","title":"Usage Example - Classification","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using MLJ\nX, y = MLJ.make_blobs(1000, 2, centers=2)\ntrain, calibration, test = partition(eachindex(y), 0.4, 0.4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"([1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [401, 402, 403, 404, 405, 406, 407, 408, 409, 410  …  791, 792, 793, 794, 795, 796, 797, 798, 799, 800], [801, 802, 803, 804, 805, 806, 807, 808, 809, 810  …  991, 992, 993, 994, 995, 996, 997, 998, 999, 1000])","category":"page"},{"location":"","page":"Home","title":"Home","text":"EvoTreeClassifier = @load EvoTreeClassifier pkg=EvoTrees\nmodel = EvoTreeClassifier() ","category":"page"},{"location":"","page":"Home","title":"Home","text":"import EvoTrees ✔","category":"page"},{"location":"","page":"Home","title":"Home","text":"┌ Info: For silent loading, specify `verbosity=0`. \n└ @ Main /Users/FA31DU/.julia/packages/MLJModels/hAzAn/src/loading.jl:159\n┌ Info: Following 15 arguments were not provided and will be set to default: nbins, alpha, gamma, nrounds, metric, max_depth, T, loss, lambda, min_weight, colsample, eta, rng, device, rowsample.\n└ @ EvoTrees /Users/FA31DU/.julia/packages/EvoTrees/qTzpB/src/models.jl:242\n\nEvoTreeClassifier(\n  loss = EvoTrees.Softmax(), \n  nrounds = 10, \n  lambda = 0.0, \n  gamma = 0.0, \n  eta = 0.1, \n  max_depth = 5, \n  min_weight = 1.0, \n  rowsample = 1.0, \n  colsample = 1.0, \n  nbins = 32, \n  alpha = 0.5, \n  metric = :none, \n  rng = Random.MersenneTwister(123), \n  device = \"cpu\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"mach = machine(model, X, y)\nfit!(mach, rows=train)","category":"page"},{"location":"","page":"Home","title":"Home","text":"┌ Info: Training machine(EvoTreeClassifier(loss = EvoTrees.Softmax(), …), …).\n└ @ MLJBase /Users/FA31DU/.julia/packages/MLJBase/CtxrQ/src/machines.jl:496\n\ntrained Machine; caches model-specific representations of data\n  model: EvoTreeClassifier(loss = EvoTrees.Softmax(), …)\n  args: \n    1:  Source @152 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @503 ⏎ AbstractVector{Multiclass{2}}","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ConformalPrediction\nconf_mach = conformal_machine(mach)\ncalibrate!(conf_mach, selectrows(X, calibration), y[calibration])","category":"page"},{"location":"","page":"Home","title":"Home","text":"400-element Vector{Float64}:\n 0.8820845128663057\n 0.11791548713370947\n 0.11791548713369993\n 0.11791548713369815\n 0.11791548713369815\n 0.11791548713369815\n 0.11791548713369437\n 0.11791548713369437\n 0.11791548713369437\n 0.11791548713369437\n 0.11791548713369437\n 0.11791548713369437\n 0.11791548713369437\n ⋮\n 0.11791548713369404\n 0.11791548713369404\n 0.11791548713369404\n 0.11791548713369404\n 0.11791548713369404\n 0.11791548713369404\n 0.11791548713369404\n 0.11791548713369393\n 0.11791548713369393\n 0.11791548713369349\n 0.11791548713369349\n 0.11791548713369338","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(conf_mach, selectrows(X, test))","category":"page"},{"location":"","page":"Home","title":"Home","text":"200-element Vector{Vector}:\n Pair{Int64}[1 => 0.8820845128663056, 2 => missing]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => 0.8820845128663057, 2 => missing]\n Pair{Int64}[1 => 0.8820845128663057, 2 => missing]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.882084512866306]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n ⋮\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => 0.8820845128663057, 2 => missing]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663056]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n [1 => missing, 2 => missing]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => 0.8820845128663057, 2 => missing]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => missing, 2 => 0.8820845128663057]\n Pair{Int64}[1 => 0.8820845128663057, 2 => missing]","category":"page"},{"location":"#Usage-Example-Regression","page":"Home","title":"Usage Example - Regression","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using MLJ\nX, y = MLJ.make_regression(1000, 2)\ntrain, calibration, test = partition(eachindex(y), 0.4, 0.4)","category":"page"},{"location":"","page":"Home","title":"Home","text":"([1, 2, 3, 4, 5, 6, 7, 8, 9, 10  …  391, 392, 393, 394, 395, 396, 397, 398, 399, 400], [401, 402, 403, 404, 405, 406, 407, 408, 409, 410  …  791, 792, 793, 794, 795, 796, 797, 798, 799, 800], [801, 802, 803, 804, 805, 806, 807, 808, 809, 810  …  991, 992, 993, 994, 995, 996, 997, 998, 999, 1000])","category":"page"},{"location":"","page":"Home","title":"Home","text":"EvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees\nmodel = EvoTreeRegressor() ","category":"page"},{"location":"","page":"Home","title":"Home","text":"import EvoTrees ✔","category":"page"},{"location":"","page":"Home","title":"Home","text":"┌ Info: For silent loading, specify `verbosity=0`. \n└ @ Main /Users/FA31DU/.julia/packages/MLJModels/hAzAn/src/loading.jl:159\n┌ Info: Following 16 arguments were not provided and will be set to default: nbins, alpha, gamma, nrounds, metric, max_depth, T, loss, lambda, min_weight, colsample, eta, rng, device, rowsample, monotone_constraints.\n└ @ EvoTrees /Users/FA31DU/.julia/packages/EvoTrees/qTzpB/src/models.jl:67\n\nEvoTreeRegressor(\n  loss = EvoTrees.Linear(), \n  nrounds = 10, \n  lambda = 0.0, \n  gamma = 0.0, \n  eta = 0.1, \n  max_depth = 5, \n  min_weight = 1.0, \n  rowsample = 1.0, \n  colsample = 1.0, \n  nbins = 32, \n  alpha = 0.5, \n  monotone_constraints = Dict{Int64, Int64}(), \n  metric = :none, \n  rng = Random.MersenneTwister(123), \n  device = \"cpu\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"mach = machine(model, X, y)\nfit!(mach, rows=train)","category":"page"},{"location":"","page":"Home","title":"Home","text":"┌ Info: Training machine(EvoTreeRegressor(loss = EvoTrees.Linear(), …), …).\n└ @ MLJBase /Users/FA31DU/.julia/packages/MLJBase/CtxrQ/src/machines.jl:496\n\ntrained Machine; caches model-specific representations of data\n  model: EvoTreeRegressor(loss = EvoTrees.Linear(), …)\n  args: \n    1:  Source @577 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @033 ⏎ AbstractVector{Continuous}","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ConformalPrediction\nconf_mach = conformal_machine(mach)\ncalibrate!(conf_mach, selectrows(X, calibration), y[calibration])","category":"page"},{"location":"","page":"Home","title":"Home","text":"400-element Vector{Float64}:\n 1.020796915310163\n 0.9544754367741889\n 0.8768916442696842\n 0.8183743546598778\n 0.8090286060009673\n 0.7824024089583821\n 0.7605924179304372\n 0.7558628628052859\n 0.7371743559476327\n 0.7217880035559481\n 0.7146059351598169\n 0.6956179352466294\n 0.6953272831039539\n ⋮\n 0.00985900983083643\n 0.009465831274560799\n 0.00820166381465981\n 0.0081373124168298\n 0.0076814050820450674\n 0.006090868064642541\n 0.005611262435643027\n 0.005605159452394259\n 0.00512789461551777\n 0.003088433456121198\n 0.003064622363849301\n 0.002807458532986473","category":"page"},{"location":"","page":"Home","title":"Home","text":"predict(conf_mach, selectrows(X, test))","category":"page"},{"location":"","page":"Home","title":"Home","text":"200-element Vector{Vector{Pair{String, Vector{Float64}}}}:\n [\"lower\" => [1.0728086548446025], \"upper\" => [2.3309516963136208]]\n [\"lower\" => [0.45418484657442004], \"upper\" => [1.712327888043438]]\n [\"lower\" => [0.825406022685176], \"upper\" => [2.083549064154194]]\n [\"lower\" => [1.3248507854765423], \"upper\" => [2.58299382694556]]\n [\"lower\" => [1.3885385667952432], \"upper\" => [2.6466816082642612]]\n [\"lower\" => [1.3885385667952432], \"upper\" => [2.6466816082642612]]\n [\"lower\" => [1.0564884295756272], \"upper\" => [2.3146314710446454]]\n [\"lower\" => [0.6653588725357036], \"upper\" => [1.9235019140047216]]\n [\"lower\" => [1.0313441800908243], \"upper\" => [2.2894872215598423]]\n [\"lower\" => [0.6629749308303552], \"upper\" => [1.9211179722993732]]\n [\"lower\" => [0.790653559750319], \"upper\" => [2.048796601219337]]\n [\"lower\" => [1.705921181554554], \"upper\" => [2.964064223023572]]\n [\"lower\" => [0.8664248777476262], \"upper\" => [2.124567919216644]]\n ⋮\n [\"lower\" => [0.790653559750319], \"upper\" => [2.048796601219337]]\n [\"lower\" => [1.0345593429405255], \"upper\" => [2.2927023844095435]]\n [\"lower\" => [0.5312814291421308], \"upper\" => [1.7894244706111488]]\n [\"lower\" => [1.2521928020125006], \"upper\" => [2.510335843481519]]\n [\"lower\" => [1.3909748432650182], \"upper\" => [2.649117884734036]]\n [\"lower\" => [0.825406022685176], \"upper\" => [2.083549064154194]]\n [\"lower\" => [1.0033815209442536], \"upper\" => [2.2615245624132716]]\n [\"lower\" => [0.3831553409031443], \"upper\" => [1.6412983823721623]]\n [\"lower\" => [0.9745467593528632], \"upper\" => [2.2326898008218814]]\n [\"lower\" => [0.569852801895653], \"upper\" => [1.827995843364671]]\n [\"lower\" => [0.983445096590474], \"upper\" => [2.241588138059492]]\n [\"lower\" => [1.853369290344466], \"upper\" => [3.111512331813484]]","category":"page"}]
}
