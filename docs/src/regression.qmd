# Regression

```@meta
CurrentModule = ConformalPrediction
```

```{julia}
#| echo: false
using Pkg; Pkg.activate("docs")
using Plots
theme(:wong)
```

```{julia}
# Regression data:

# Inputs:
N = 600
xmax = 5.0
using Distributions
d = Uniform(-xmax, xmax)
X = rand(d, N)

# Outputs:
noise = 0.5
fun(X) = X * sin(X)
ε = randn(N) .* noise
y = @.(fun(X)) + ε
using MLJ
train, test = partition(eachindex(y), 0.4, 0.4, shuffle=true)

using Plots
scatter(X, y, label="Observed")
xrange = range(-xmax,xmax,length=N)
plot!(xrange, @.(fun(xrange)), lw=4, label="Ground truth")
```

```{julia}
EvoTreeRegressor = @load EvoTreeRegressor pkg=EvoTrees
model = EvoTreeRegressor(nrounds=50)
```

```{julia}
using ConformalPrediction
conf_model = conformal_model(model)
X = reshape(X, :, 1)
Xtab = MLJ.table(X)
mach = machine(conf_model, Xtab, y)
fit!(mach, rows=train)
```

```{julia}
using Plots
zoom = -5
plot(mach.model, mach.fitresult, X, y, zoom=zoom)
```
