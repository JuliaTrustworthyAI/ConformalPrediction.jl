# ConformalTraining

```@meta
CurrentModule = ConformalPrediction
```

```{julia}
#| echo: false
using Pkg; Pkg.activate("docs")
using Plots
theme(:wong)
using Random
Random.seed!(2022)
www_path = "docs/src/www"   # output path for files don't get automatically saved in auto-generated path (e.g. GIFs)
```


```{julia}
using MLJ
using Random
Random.seed!(123)

# Regression data:

# Inputs:
N = 600
xmax = 5.0
using Distributions
d = Uniform(-xmax, xmax)
X = rand(d, N)
X = Float32.(reshape(X, :, 1))

# Outputs:
noise = 0.5
fun(X) = X * sin(X)
ε = randn(N) .* noise
y = @.(fun(X)) + ε
y = vec(y)
y = Float32.(y)

# Partition:
using MLJ
train, test = partition(eachindex(y), 0.4, 0.4, shuffle=true)
```


```{julia}
using MLJFlux
using ConformalPrediction
using ConformalPrediction.ConformalTraining: ConformalNNRegressor
using Flux

# Model:
builder = MLJFlux.MLP(hidden=(32, 32, 32,), σ=Flux.relu)
mod = ConformalNNRegressor(epochs=250, builder=builder, batch_size=50)
# clf = NeuralNetworkRegressor(epochs=250, builder=builder, batch_size=50)
```


```{julia}
conf_model = conformal_model(mod; method=:simple_inductive)
mach = machine(conf_model, X, y)
fit!(mach, rows=train)
```

```{julia}
#| output: true

using Plots
p_proba = contourf(mach.model, mach.fitresult, X, y)
p_set_size = contourf(mach.model, mach.fitresult, X, y; plot_set_size=true)
plot(p_proba, p_set_size, size=(800,250))
```


```{julia}
mean(ConformalPrediction.set_size.(predict(mach)))
```
